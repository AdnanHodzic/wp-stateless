<?php

/**
 * Plugin Name: WP Stateless
 * Plugin URI: https://wordpress.org/plugins/wp-stateless/
 *
 * Compatibility Description: Private files.
 *
 * 
 * @todo update the_content filter so the it replace with sign url. 
 *       Also need to update regex so that it can also recognize sined url so it can replace expired url with updated sined url.
 *       Also chec if editor shows images after expiration time is over.
 * @todo No idea how it is working on frontend. Need to check.
 */

namespace wpCloud\StatelessMedia {

  if (!class_exists('wpCloud\StatelessMedia\PRIVATE_FILE')) {

    class PRIVATE_FILE extends ICompatibility{
      protected $id = 'private-file';
      protected $title = 'Private File';
      protected $constant = 'WP_STATELESS_COMPATIBILITY_PRIVATE_FILE';
      protected $description = 'Ensures compatibility with CSS files generated by SiteOrigin.';
      protected $first_party = true;
      protected $hidden = true;

      /**
       * @param $sm
       */
      public function module_init($sm){
        $private_file = ud_get_stateless_media()->get('sm.private_file');
        if ($private_file == 'true') {
          add_filter('wp_stateless_media_acl', array($this, 'media_acl'), 20, 3);
          
          if ($this->can_use()) {
            add_filter('wp_get_attachment_url', array($this, 'wp_get_attachment_url'), 100, 2);
            add_filter('wp_get_attachment_image_src', array($this, 'wp_get_attachment_image_src'), 100, 4);
            add_filter('image_get_intermediate_size', array($this, 'image_get_intermediate_size'), 100, 3);
            add_filter('wp_prepare_attachment_for_js', array($this, 'wp_prepare_attachment_for_js'), 200, 1);
            // add_filter('ajax_query_attachments_args', array($this, 'ajax_query_attachments_args'), 10, 1);

            // need seperate filter
            add_filter('wp_stateless_gcs_url', array($this, 'media_signature'), 20);
          }

          // add_action( 'admin_menu', array( $this, 'action_admin_menu' ), 3 );
        }
      }

      /**
       * Media ACL based on Private File setting.
       */
      public function media_acl($acl){
        return null;
      }

      /**
       * Filter for wp_get_attachment_url();
       * @param string $url
       * @param int $attachment_id
       * @return mixed|null|string
       */
      public function wp_get_attachment_url($url = '', $attachment_id = ''){
        return $this->media_signature($url, null, $attachment_id);
      }

      /**
       * Filter for wp_get_attachment_image_src();
       * @param string $url
       * @param int $attachment_id
       * @return mixed|null|string
       */
      public function wp_get_attachment_image_src($image, $attachment_id, $size, $icon){
        $image[0] = $this->media_signature($image[0], null, $attachment_id);
        return $image;
      }

      /**
       * Filter for wp_get_attachment_image_src();
       * @param string $url
       * @param int $attachment_id
       * @return mixed|null|string
       */
      public function image_get_intermediate_size($data, $post_id, $size){
        $data['url'] = $this->media_signature($data['url'], null, $post_id);
        return $data;
      }

      // /**
      //  * Filter for wp_get_attachment_image_src();
      //  * @param string $url
      //  * @param int $attachment_id
      //  * @return mixed|null|string
      //  */
      // public function ajax_query_attachments_args($query){
      //   // print_r($query);
      //   return $query;
      // }

      /**
       * Filter for wp_get_attachment_image_src();
       * @param string $url
       * @param int $attachment_id
       * @return mixed|null|string
       */
      public function wp_prepare_attachment_for_js($post){
        $post['url'] = $this->media_signature($post['url'], null, $post['id'], true);
        if(is_array($post['sizes'])){
          foreach($post['sizes'] as $size => $meta){
            $post['sizes'][$size]['url'] = $this->media_signature($meta['url'], null, $post['id'], true);
          }
        }
        return $post;
      }

      /**
       * Check whethere user can see/use media file.
       */
      public function can_use($media_file = null, $attachment_id = null){
        if (is_user_logged_in()) {
          return true;
        }
        return false;
      }

      /**
       * 
       */
      public function media_signature($object_url, $time = null, $attachment_id = null, $forced = false){
        if ($this->can_use($object_url, $attachment_id) || $forced) {
          return $this->_media_signature($object_url, $time);
        }
        return $object_url;
      }

      /**
       * 
       * 
       * @param GCS-URL $object_url
       * @param Second $time
       */
      private function _media_signature($object_url, $time = null){
        if (!$time) {
          $time = (int) ud_get_stateless_media()->get('sm.private_file_expire');
        }

        //  && (!$media_file || strpos($media_file, '?GoogleAccessId=') === false)
        $is_singed = strpos($object_url, '?GoogleAccessId=');
        if($is_singed !== false){
          $parsed_url = parse_url($object_url, PHP_URL_QUERY);
          $parsed_url = wp_parse_args($parsed_url);
          $expires = $parsed_url['Expires'];
          if($expires < time() + 10 ){
            $object_url = preg_replace('@\?GoogleAccessId=.*@', '', $object_url);
          }
          else{
            return $object_url;
          }
        }

        $expiry = time() + $time;
        $bucketName = rtrim(ud_get_stateless_media()->get('sm.bucket'), '/');

        $mediaName = str_replace(ud_get_stateless_media()->get_gs_host(), '', $object_url);

        $key_json = json_decode(ud_get_stateless_media()->settings->get('sm.key_json'), 1);
        $accessId = $key_json['client_email'];
        $stringPolicy = "GET\n\n\n" . $expiry . "\n/" . $bucketName . $mediaName; // ".$media->contentType."
        $pkeyid = openssl_get_privatekey($key_json['private_key']);

        if (openssl_sign($stringPolicy, $signature, $pkeyid, 'sha256')) {
          $signature = urlencode(base64_encode($signature));
          // error_log('signed URL: '.$object_url.'?GoogleAccessId='.$accessId.'&Expires='.$expiry.'&Signature='.$signature);
          return $object_url . '?GoogleAccessId=' . $accessId . '&Expires=' . $expiry . '&Signature=' . $signature;
        }
        return $object_url;
      }
    }
  }
}
